cmake_minimum_required(VERSION 2.8)
 
if(POLICY CMP0020)
  cmake_policy(SET CMP0020 NEW)
endif()

PROJECT(ShapeAnalyzer)

find_package(VTK REQUIRED)
include(${VTK_USE_FILE})

#set(CMAKE_CXX_FLAGS "-v")

if(${VTK_VERSION} VERSION_GREATER "6" AND VTK_QT_VERSION VERSION_GREATER "4")
  # Instruct CMake to run moc automatically when needed.
  set(CMAKE_AUTOMOC ON)
# set(CMAKE_AUTOMOC_RELAXED_MODE TRUE)
  find_package(Qt5Widgets REQUIRED QUIET)
else()
  find_package(Qt4 REQUIRED)
  include(${QT_USE_FILE})
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})

file(GLOB_RECURSE UI_FILES *.ui)
file(GLOB QT_WRAP *.h)
file(GLOB CXX_FILES *.cxx)
file(GLOB CPP_FILES *.cpp)
file(GLOB_RECURSE AUTO_GENERATED (ui_*.h) | (*.cpp) )
file(GLOB GEODESICS ${CMAKE_CURRENT_SOURCE_DIR}/geodesics/*)
file(GLOB QT ${CMAKE_CURRENT_SOURCE_DIR}/qt/*)
file(GLOB METRICS ${CMAKE_CURRENT_SOURCE_DIR}/metrics/*)
file(GLOB SAMPLINGS ${CMAKE_CURRENT_SOURCE_DIR}/samplings/*)
file(GLOB COLORINGS ${CMAKE_CURRENT_SOURCE_DIR}/coloring/*)

file(GLOB_RECURSE CORRESPONDENCES_HEADER *Correspondence*.h)
file(GLOB_RECURSE CORRESPONDENCES_SOURCE (*Correspondence*.cxx | *Correspondence*.cpp))
file(GLOB VTK_HEADER vtk*.h)
file(GLOB VTK_SOURCE vtk*.cxx)
file(GLOB SHAPE_HEADER *Shape*.h)
file(GLOB SHAPE_SOURCE *Shape*.cxx)
file(GLOB_RECURSE ATTRIBUTES attributes/*)

set(HEADERS_HAVING_Q_OBJECT)
foreach(header ${QT_WRAP})
    file(STRINGS "${header}" lines REGEX "Q_OBJECT")
    if(lines)
        list(APPEND HEADERS_HAVING_Q_OBJECT "${header}")
    endif()
endforeach()



if(${VTK_VERSION} VERSION_GREATER "6" AND VTK_QT_VERSION VERSION_GREATER "4")
  qt5_wrap_ui(UISrcs ${UI_FILES} )
#  qt5_wrap_cpp(ShapeAnalyzerMocs ${HEADERS_HAVING_Q_OBJECT})
  # CMAKE_AUTOMOC in ON so the MocHdrs will be automatically wrapped.
add_executable(ShapeAnalyzer MACOSX_BUNDLE ${CXX_FILES} ${CPP_FILES} ${GEODESICS} ${QT} ${METRICS} ${SAMPLINGS} ${COLORINGS} ${UISrcs} ${QT_WRAP} ${ATTRIBUTES})
  qt5_use_modules(ShapeAnalyzer Core Gui)
  target_link_libraries(ShapeAnalyzer ${VTK_LIBRARIES})
else()
  # might not work
  QT4_WRAP_UI(UISrcs ${UI_FILES})
  QT4_WRAP_CPP(MOCSrcs ${QT_WRAP})
add_executable(ShapeAnalyzer MACOSX_BUNDLE ${CXX_FILES} ${CPP_FILES} ${GEODESICS} ${QT} ${METRICS} ${SAMPLINGS} ${COLORINGS} ${UISrcs} ${QT_WRAP} ${ATTRIBUTES})

  if(VTK_LIBRARIES)
    if(${VTK_VERSION} VERSION_LESS "6")
      target_link_libraries(ShapeAnalyzer ${VTK_LIBRARIES} QVTK)
    else()
      target_link_libraries(ShapeAnalyzer ${VTK_LIBRARIES})
    endif()
  else()
    target_link_libraries(ShapeAnalyzer vtkHybrid QVTK vtkViews ${QT_LIBRARIES})
  endif()
endif()

source_group("Geodesics" FILES ${GEODESICS})
source_group("Correspondences\\Header Files" FILES ${CORRESPONDENCES_HEADER})
source_group("Correspondences\\Source Files" FILES ${CORRESPONDENCES_SOURCE})
source_group("VTK\\Header Files" FILES ${VTK_HEADER})
source_group("VTK\\Source Files" FILES ${VTK_SOURCE})
source_group("Shapes\\Header Files" FILES ${SHAPE_HEADER})
source_group("Shapes\\Source Files" FILES ${SHAPE_SOURCE})
source_group("ShapeAnalyzer" FILES ShapeAnalyzer.h ShapeAnalyzer.cxx ShapeAnalyzerDriver.cxx)
source_group("vtk Reader" FILES ${VTKREADER})
source_group("QT" FILES ${QT})
source_group("Metrics" FILES ${METRICS})
source_group("Samplings" FILES ${SAMPLINGS})
source_group("Coloring" FILES ${COLORINGS})
source_group("Attributes" FILES ${ATTRIBUTES} attributes/Descriptor.h)
source_group("UI Files" FILES  ${UI_FILES})
